using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace Tutorial_8_Blockchain_Library
{
    /// <summary>
    /// Purpose: The blockchain class stores the blockchain and the method used to generate the genesis block.
    /// The genesis block is the first block in the blockchain
    /// Author: Aaron Gangemi
    /// Date Modified: 29/05/2020
    /// </summary>
    public static class Blockchain
    {
        public static List<Block> BlockChain = new List<Block>();

        /// <summary>
        /// Purpose: To generate the first initial block of the blockchain
        /// </summary>
        public static void generateGenesisBlock()
        {
            if(GetChainCount() == 0)
            {
                SHA256 sha256 = SHA256.Create();
                int val = 0;
                uint hashOffset = 0;
                string hashedString = "";
                while (!hashedString.StartsWith("12345"))
                {
                    // brute force a hash to start with 12345
                    hashOffset++;
                    string blockString = val.ToString() + val.ToString() + val.ToString() + hashOffset + "";
                    // concatenate a string
                    byte[] textBytes = Encoding.UTF8.GetBytes(blockString);
                    byte[] hashedData = sha256.ComputeHash(textBytes);
                    hashedString = BitConverter.ToUInt64(hashedData, 0).ToString();
                    // get integer representation of hash
                }
                BlockChain.Add(new Block(0, 0, 0, hashOffset, "", hashedString));
                // add to block
            }
        }

        /// <summary>
        /// Purpose: Add a block to the blockchain
        /// </summary>
        /// <param name="block"></param>
        public static void AddBlock(Block block)
        {
            BlockChain.Add(block);
        }

        /// <summary>
        /// Purpose: To retreive the number of blocks in the chain
        /// </summary>
        /// <returns>Number of blocks in chain</returns>
        public static int GetChainCount()
        {
            return BlockChain.Count;
        }

        /// <summary>
        /// Purpose: To retrieve the account balance for the given ID. 
        /// The balance is generated by looping through the blockchain and calculating the amount for a given account
        /// </summary>
        /// <param name="acntID"></param>
        /// <returns>Account balance</returns>
        public static float GetAccountBalance(uint acntID)
        {
            float balance = 0;
            if (acntID == 0)
            {
                balance = float.MaxValue;
                // account 0 will have infinite funds
            }
            else
            {
                foreach (Block block in Blockchain.BlockChain)
                {
                    // loop through chain
                    if (block.walletIdFrom == acntID)
                    {
                        // if sender, then subtract funds
                        balance -= block.amount;
                    }
                    if (block.walletIdTo == acntID)
                    {
                        // if reciever, then add funds
                        balance += block.amount;
                    }
                }
            }
            return balance;
        }

        /// <summary>
        /// Purpose: To validate the passed in block to confirm that it meets the criteria to join the blockchain
        /// </summary>
        /// <param name="block"></param>
        /// <returns>Whether or not the block can join the chain</returns>
        public static bool ValidateBlock(Block block)
        {
            SHA256 sha256 = SHA256.Create();
            string blockString = block.walletIdFrom.ToString() + block.walletIdTo.ToString() + block.amount.ToString() + block.blockOffset + block.prevBlockHash;
            // concatenate the block elements into a string for hashing
            byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(blockString));
            // compute the hash for the block string
            string hashedString = BitConverter.ToUInt64(hash, 0).ToString();
            // get int value for hash
            // check amount, balance, previous block hash and current block hash, what the block starts with, sender and reciever fields
            if ((GetAccountBalance(block.walletIdFrom) < block.amount) || (block.amount <= 0)
                || (block.prevBlockHash != BlockChain.Last().blockHash)
                || (!block.blockHash.StartsWith("12345")) || (block.amount < 0) || (block.walletIdFrom < 0) ||
                (block.walletIdTo < 0) || (GetAccountBalance(block.walletIdFrom) < 0) || (block.blockHash != hashedString))
            {
                // if one or more fields is true, then return false indicating do not add to chain
                return false;
            }
            // if all fields are validated, then allow chain to be valid
            return true;
        }
    }
}
