using BlockchainLibrary;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web.Http;
using Tutorial_7_Blockchain_Server.Models;

namespace Tutorial_7_Blockchain_Server.Controllers
{
    /// <summary>
    /// Purpose: This contains the methods stored for the blockchain server. They can be accessed by the specified api call.
    /// Author: Aaron Gangemi
    /// Date Modified: 29/05/2020
    /// </summary>
    public class ServerController : ApiController
    {
        /// <summary>
        /// Purpose: To retrieve the current blockchain
        /// </summary>
        /// <returns>Blockchain</returns>
        [Route("api/Server/GetBlockchain")]
        [HttpGet]
        public List<Block> GetBlockchain()
        {
            return Blockchain.BlockChain;
        }

        /// <summary>
        /// Purpose: To get the number of blocks in the current blockchain
        /// </summary>
        /// <returns>Number of blocks in blockchain</returns>
        [Route("api/Server/GetNoOfBlocks")]
        [HttpGet]
        public int GetChainCount()
        {
            return Blockchain.BlockChain.Count;
        }

        /// <summary>
        /// Purpose: To retrieve the account balance for the given ID. 
        /// The balance is generated by looping through the blockchain and calculating the amount for a given account
        /// </summary>
        /// <param name="acntID"></param>
        /// <returns>Account balance</returns>
        [Route("api/Server/GetBalance/{acntID}")]
        [HttpGet]
        public float GetAccountBalance(uint acntID)
        {
            float balance = 0;
            if(acntID == 0)
            {
                balance = float.MaxValue;
                // Account 0 will have infinite funds
            }
            else
            {
                foreach (Block block in Blockchain.BlockChain)
                {
                    // Loop through blockchain
                    if (block.walletIdFrom == acntID)
                    {
                        // subtract if the user is sending funds
                        balance -= block.amount;
                    }
                    if (block.walletIdTo == acntID)
                    {
                        // add if they are recieving funds
                        balance += block.amount;
                    }
                }
            }
            return balance;
        }

        /// <summary>
        /// Purpose: To validate the passed in block to confirm that it meets the criteria to join the blockchain
        /// </summary>
        /// <param name="block"></param>
        /// <returns>Whether or not the block can join the chain</returns>
        [Route("api/Server/ValidateBlock/")]
        [HttpPost]
        public bool ValidateBlock([FromBody] Block block)
        {
            SHA256 sha256 = SHA256.Create();
            string blockString = block.walletIdFrom.ToString() + block.walletIdTo.ToString() + block.amount.ToString() + block.blockOffset + block.prevBlockHash;
            // concatenate the block elements into a string for hashing
            byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(blockString));
            // compute the hash for the block string
            string hashedString = BitConverter.ToUInt64(hash, 0).ToString();
            // get int value for hash
            // check amount, balance, previous block hash and current block hash, what the block starts with, sender and reciever fields
            if ((GetAccountBalance(block.walletIdFrom) < block.amount) || (block.amount <= 0)
                || (block.prevBlockHash != Blockchain.BlockChain.Last().blockHash)
                || (!block.blockHash.StartsWith("12345")) || (block.amount < 0) || (block.walletIdFrom < 0) || 
                (block.walletIdTo < 0) || (GetAccountBalance(block.walletIdFrom) < 0)|| (block.blockHash != hashedString))
            {
                // if one or more fields is true, then return false indicating do not add to chain
                Debug.WriteLine("Validation failed, please try again");
                return false;
            }
            Debug.WriteLine("All validation passed successfully");
            // if all fields are validated, then allow chain to be valid
            return true;
        }

        /// <summary>
        /// Purpose: Add the block to the current blockchain
        /// </summary>
        /// <param name="block"></param>
        [Route("api/Server/AddBlock")]
        [HttpPost]
        public void AddBlock([FromBody] Block block)
        {
            Blockchain.BlockChain.Add(block);
        }

        /// <summary>
        /// Purpose: To generate the genesis block for the blockchain
        /// </summary>
        [Route("api/Server/GenerateGenesisBlock")]
        [HttpPost]
        public void GenerateGenesisBlock()
        {
            Blockchain.generateGenesisBlock();
        }
    }
}